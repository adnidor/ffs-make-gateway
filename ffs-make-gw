#!/bin/bash
# Referenz: https://wiki.freifunk-stuttgart.net/technik:gateways:gateway-einrichten

set -e
export LC_ALL=C
CALL="$*"

print_help() {
cat <<EOF >&2
usage: $0 --gwid N [--vpnkey=xxxx] [--no-systemd] [--no-apt-update] [--no-apt-key] [--othergw=172.21.16.1] [--directtcp="443[ 995][...]"] [--with-lihas-firewall] [--segments N] [--gws N] [--with-backbone-vpn] [--no-log-call]
Verwandelt einen Debian Jessie Server mit systemd in ein Freifunk-GW
--help:          Dieser Text
--name:          Gatewayname
--gwid:          Gateway ID (1-10)
--vpnkey:        use this fastd private key (string)
--dhcp-relay-servers: DHCP Relay Server die dieses GW benutzt, Default "172.21.16.1 172.21.20.1"
--directtcp:     Liste der TCP-Ports die direkt ausgeleitet werden, durch Leerzeichen getrennt (Quoting nicht vergessen)
--gws:           Maximale Anzahle Gateways, nur fuer batman Namensaufloesung, Default 10
--gwsubid:       Gateway Sub-ID
--no-apt-key:    keine neuen APT-Keys hinzufuegen
--no-apt-update: apt-get update nicht ausfuehren
--no-systemd:    Nicht aufd systemd bestehen, dann muss man alles int-Zeugs von hand machen
--othergw:       IP eines anderen GWs fuer ausgehenden Traffic, z.B. 172.21.16.1 (gw04)
--segments:      Anzahl Segmente, Default 4
--with-lihas-firewall: Installiere LiHAS Firewall fuer policy routing
--with-backbone-vpn: Nimm das backbone-tinc, github-Schreibzugriff auf git+ssh://git@github.com/freifunk-stuttgart/tinc-ffsbb wird benoetigt
--no-log-call:   Aufruf nicht unter /var/log/$0 speichern
EOF
}
CONFIRM=1
DHCPRELAYSERVERS="172.21.16.1 172.21.20.1"
DIRECTTCP=""
GWS=10
GWSUBID="0"
LOG_CALL=1
NEEDS_APTKEY=1
NEEDS_APTUPDATE=1
NEEDS_SYSTEMD=1
OPT_FWLIHAS=0
SEGMENTS=4
TINC_BB=0
VPNKEY="Wird generiert"
error() {
  print_help
  echo "$*"
  exit 1
}
TEMP=`getopt -o h --long help,dhcp-relay-servers:,name:,ip:,gwid:,gwsubid:,gws:,vpnkey:,with-backbone-vpn,with-lihas-firewall,othergw:,directtcp:,no-systemd,no-apt-update,no-apt-key,no-log-call,segments: -- "$@"`
if [ $? != 0 ] ; then print_help >&2 ; exit 1 ; fi
eval set -- "$TEMP"
while true ; do
  case "$1" in
    --name)             GWNAME=$2; shift 2;;
    --gwid)             GWID=$2; shift 2;;
    --gwsubid)          GWSUBID=$2; shift 2;;
    --gws)              GWS=$2; shift 2;;
    --dhcp-relay-servers) DHCPRELAYSERVERS="$2"; shift 2;;
    --vpnkey)           VPNKEY=$2; shift 2;;
    --with-lihas-firewall) OPT_FWLIHAS=1; shift 1;;
    --othergw)		OTHERGW_IP=$2; shift 2;;
    --directtcp)	DIRECTTCP="$2"; shift 2;;
    --no-systemd)	NEEDS_SYSTEMD=0; shift 1;;
    --no-apt-update)	NEEDS_APTUPDATE=0; shift 1;;
    --no-apt-key)	NEEDS_APTKEY=0; shift 1;;
    --no-log-call)	LOG_CALL=0; shift 1;;
    --no-confirm)	CONFIRM=0; shift 1;;
    --with-backbone-vpn) TINC_BB=1; shift 1;;
    --segments)		SEGMENTS="$2"; shift 2;;
    --help|-h) print_help; exit 1;;
    --) shift ; break ;;
    *) echo "Unknown parameter $1, try -h" ; exit 1 ;;
  esac
done
if [ $LOG_CALL -eq 1 ]; then
  echo $CALL >> "/var/log/${0##*/}"
fi
if [ x"$GWID" == "x" ]; then
	echo "Keine GatewayID -> kein Gateway"
	exit 1
fi
GWLID=$(printf "%02i" $GWID)
GWLSUBID=$(printf "%02i" $GWSUBID)
LEGIP=172.21.$((4*$GWID)).1
EXT_IF_V4=$(ip r l table main | sed -n '/default/{s/^.*dev //; s/ .*//; p}')
EXT_IP_V4=$(ip r l table main | sed -n '/dev '$EXT_IF_V4' .*src/{ s/^.* src // ;s/ .*//; p}')
EXT_GW_V4=$(ip r l table main | sed -n '/default/{s/.*via //; s/ .*//; p}')
EXT_IF_V6=$(ip -6 r l table main | sed -n '/default/{s/^.*dev //; s/ .*//; p}')
EXT_IPS_V6=$(ip -6 a l dev $EXT_IF_V6 | sed -n '/inet6/{s/.*inet6 //; s/\/.*//; /fe80/d; p}')
cat <<EOF
GatewayID (GWID): $GWID
Gateway Long ID (GWLID): $GWLID
Gateway Sub ID (GWLSUBID): $GWLSUBID
Legacy Net IP (LEGIP): $LEGIP
Externes Interface v4 (EXT_IF_V4): $EXT_IF_V4
Externe IP v4 (EXT_IP_V4): $EXT_IP_V4
Externes Interface v6 (EXT_IF_V6): $EXT_IF_V6
Externe IPs v6 (EXT_IP_V6): $EXT_IPS_V6
fastd VPN Key: $VPNKEY
EOF
if [ $CONFIRM -eq 1 ]; then
	echo "Wenn alles richtig ist, Eingabe druecken, sonst Abbrechen mit Strg-C"
	read x
fi

if ! dpkg -S /sbin/init | awk -F: '$1 != "systemd-sysv" {exit 1}' && [ $NEEDS_SYSTEMD -eq 1 ]; then
	echo "/sbin/init is not systemd-sysv" >&2
	echo "use --no-systemd to overwrite" >&2
	exit 1
fi

if [ ! -d /etc/apt/sources.list.d ]; then
	mkdir -p /etc/apt/sources.list.d
fi

. add_repositories.sh
. ensureline.sh
. setup_alfred.sh
. setup_batman.sh
. setup_bird.sh
. setup_fastd.sh
. setup_ffsconfiggenerator.sh
. setup_firewall.sh
. setup_interface.sh
. setup_monitoring.sh
. setup_system.sh
. setup_tinc.sh

add_apt_repositories
add_apt_preference
if [ x"$NEEDS_APTKEY" == x1 ]; then add_apt_keys; fi
if [ x"$NEEDS_APTUPDATE" == x1 ]; then apt-get update; fi

# batadv-vis ist nicht in backports

printf 'isc-dhcp-relay\tisc-dhcp-relay/servers\tstring\t%s\n' "$DHCPRELAYSERVERS" | debconf-set-selections
printf 'isc-dhcp-relay\tisc-dhcp-relay/interfaces\tstring\t\n' | debconf-set-selections
printf 'isc-dhcp-relay\tisc-dhcp-relay/options\tstring\t-a\n' | debconf-set-selections
apt-get -y install resolvconf bind9 build-essential bridge-utils git batctl fastd alfred alfred-json openvpn tinc vnstat vnstati python-pip bind9 radvd conntrack $([ "x$OPT_FWLIHAS" == "x1" ] && echo firewall-lihas) isc-dhcp-relay apt-transport-https libjson-xs-perl libdata-dump-perl sysfsutils check-mk-agent jq xinetd bird equivs

setup_batman_dkms
setup_system_sysctl
setup_system_routing
setup_fastd

# Networking
ensureline "source-directory interfaces.d" /etc/network/interfaces
# Legacy Segment
setup_interface_seg00

OLDDIR=$(pwd)
mkdir -p /root/git
cd /root/git
# Patch and run FfsConfigGenerator
setup_ffsconfiggenerator_config
./gen_config.py --gwnum $GWID --instance $GWSUBID
# Deploy FfsConfigGenerator results
rsync -rlHpogDtvx --exclude etc/fastd etc /
cd "$OLDPWD"
setup_alfred_startup

TINCBASE=/etc/tinc/ffsbb
setup_tinc_base
cd $TINCBASE
setup_tinc_config
setup_tinc_key
if [ x"$TINCBASE" != x"/etc/tinc/ffsbb" ]; then
    rsync -rlHpogDtSvx /etc/tinc/ffsbb/hosts/$HOSTNAME  $TINCBASE/ffsbb/hosts/
fi
setup_tinc_git_push
setup_tinc_interface

if [ ! -d /etc/fastd/ffs-vpn/peers/.git ]; then
  mkdir -p /etc/fastd/ffs-vpn
  git clone https://github.com/freifunk-stuttgart/peers-ffs /etc/fastd/ffs-vpn/peers
fi
setup_fastd_config
setup_fastd_key

setup_firewall

# batman Namen
setup_batman_names

systemctl daemon-reload
update-rc.d fastd disable
systemctl enable fastd@vpn00.service 
for seg in $(seq 1 $SEGMENTS); do
  systemctl enable fastd@vpn$(printf "%02i" $seg).service 
done

# fastd /usr/local/bin/fastd-update + cronjob
setup_fastd_update
# /usr/local/bin/fastd-status
setup_fastd_status

# sysfs
system_setup_sysfs

# DHCP Relay
ensureline "SERVERS=\"$DHCPRELAYSERVERS\"" /etc/default/isc-dhcp-relay
systemctl restart isc-dhcp-relay

# bird
setup_bird

# Monitoring
setup_monitoring

if [ x"$OPT_FWLIHAS" == x1 ]; then
  echo systemctl start firewall-lihas
fi
for i in $(seq 0 4); do
  echo -n systemctl start fastd@vpn$(printf "%02i" $seg).service"; "
done
echo
echo systemctl start bird

echo "fastd Public Key: $(fastd -c /etc/fastd/ffs-vpn/secret.conf --show-key --machine-readable)"
# vim: ts=2 sw=2 sts=2 sr noet
