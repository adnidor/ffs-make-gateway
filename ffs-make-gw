#!/bin/bash
# Referenz: https://wiki.freifunk-stuttgart.net/technik:gateways:gateway-einrichten

set -e
export LC_ALL=C

print_help() {
cat <<EOF >&2
usage: $0 --gwid N [--vpnkey=xxxx] [--no-systemd] [--no-apt-update] [--no-apt-key] [--othergw=172.21.16.1] [--directtcp="443[ 995][...]"] [--with-lihas-firewall] [--segments N] [--gws N]
Verwandelt einen Debian Jessie Server mit systemd in ein Freifunk-GW
--help:          Dieser Text
--gwid:          Gateway ID (1-10)
--vpnkey:        use this fastd private key (string)
--othergw:       IP eines anderen GWs fuer ausgehenden Traffic, z.B. 172.21.16.1 (gw04)
--directtcp:     Liste der TCP-Ports die direkt ausgeleitet werden, durch Leerzeichen getrennt (Quoting nicht vergessen)
--with-lihas-firewall: Installiere LiHAS Firewall fuer policy routing
--segments:      Anzahl Segmente, Default 4
--gws:           Maximale Anzahle Gateways, nur fuer batman Namensaufloesung, Default 10
--dhcp-relay-servers: DHCP Relay Server die dieses GW benutzt, Default "172.21.16.1 172.21.20.1"
--no-systemd:    Nicht aufd systemd bestehen, dann muss man alles int-Zeugs von hand machen
--no-apt-update: apt-get update nicht ausfuehren
--no-apt-key:    keine neuen APT-Keys hinzufuegen
EOF
}
DHCPRELAYSERVERS="172.21.16.1 172.21.20.1"
NEEDS_SYSTEMD=1
NEEDS_APTUPDATE=1
NEEDS_APTKEY=1
OPT_FWLIHAS=0
DIRECTTCP=""
SEGMENTS=4
GWS=10
VPNKEY="Wird generiert"
error() {
  print_help
  echo "$*"
  exit 1
}
TEMP=`getopt -o h --long help,dhcp-relay-servers:,name:,ip:,gwid:,gws:,vpnkey:,with-lihas-firewall,othergw:,directtcp:,no-systemd,no-apt-update,no-apt-key,segments: -- "$@"`
if [ $? != 0 ] ; then print_help >&2 ; exit 1 ; fi
eval set -- "$TEMP"
while true ; do
  case "$1" in
    --name)    GWNAME=$2; shift 2;;
    --gwid)      GWID=$2; shift 2;;
    --gws)       GWS=$2; shift 2;;
    --dhcp-relay-servers) DHCPRELAYSERVERS="$2"; shift 2;;
    --vpnkey)    VPNKEY=$2; shift 2;;
    --with-lihas-firewall) OPT_FWLIHAS=1; shift 1;;
    --othergw)		OTHERGW_IP=$2; shift 2;;
    --directtcp)	DIRECTTCP="$2"; shift 2;;
    --no-systemd)	NEEDS_SYSTEMD=0; shift 1;;
    --no-apt-update)	NEEDS_APTUPDATE=0; shift 1;;
    --no-apt-key)	NEEDS_APTKEY=0; shift 1;;
    --segments)		SEGMENTS="$2"; shift 2;;
    --help|-h) print_help; exit 1;;
    --) shift ; break ;;
    *) echo "Unknown parameter $1, try -h" ; exit 1 ;;
  esac
done

if [ x"$GWID" == "x" ]; then
	echo "Keine GatewayID -> kein Gateway"
	exit 1
fi
GWLID=$(printf "%02i" $GWID)
LEGIP=172.21.$((4*$GWID)).1
EXT_IF_V4=$(ip r l table main | sed -n '/default/{s/^.*dev //; s/ .*//; p}')
EXT_IP_V4=$(ip r l table main | sed -n '/dev '$EXT_IF_V4' .*src/{ s/^.* src // ;s/ .*//; p}')
EXT_GW_V4=$(ip r l table main | sed -n '/default/{s/.*via //; s/ .*//; p}')
EXT_IF_V6=$(ip -6 r l table main | sed -n '/default/{s/^.*dev //; s/ .*//; p}')
EXT_IPS_V6=$(ip -6 a l dev $EXT_IF_V6 | sed -n '/inet6/{s/.*inet6 //; s/\/.*//; /fe80/d; p}')
cat <<EOF
GatewayID (GWID): $GWID
Gateway Long ID (GWLID): $GWLID
Legacy Net IP (LEGIP): $LEGIP
Externes Interface v4 (EXT_IF_V4): $EXT_IF_V4
Externe IP v4 (EXT_IP_V4): $EXT_IP_V4
Externes Interface v6 (EXT_IF_V6): $EXT_IF_V6
Externe IPs v6 (EXT_IP_V6): $EXT_IP_V6
fastd VPN Key: $VPNKEY
EOF

if ! dpkg -S /sbin/init | awk -F: '$1 != "systemd-sysv" {exit 1}' && [ $NEEDS_SYSTEMD -eq 1 ]; then
	echo "/sbin/init is not systemd-sysv" >&2
	echo "use --no-systemd to overwrite" >&2
	exit 1
fi

if [ ! -d /etc/apt/sources.list.d ]; then
	mkdir -p /etc/apt/sources.list.d
fi

ensureline() {
	LINE="$1"
	FILE="$2"
	if [ ! -e "$FILE" ]; then
		touch "$FILE" || return 1
	fi
	egrep -q '^'"$LINE"'$' "$FILE" || echo "$LINE" >> "$FILE" || return 1
}

ensureline "deb http://ppa.launchpad.net/freifunk-mwu/freifunk-ppa/ubuntu trusty main" /etc/apt/sources.list.d/freifunk.list
ensureline "deb-src http://ppa.launchpad.net/freifunk-mwu/freifunk-ppa/ubuntu trusty main" /etc/apt/sources.list.d/freifunk.list
ensureline "deb http://repo.universe-factory.net/debian/ sid main" /etc/apt/sources.list.d/freifunk.list
if [ "x$OPT_FWLIHAS" == "x1" ]; then
  ensureline "deb http://ftp.lihas.de/debian/ stable main" /etc/apt/sources.list.d/lihas.list
fi

cat <<'EOF' >/etc/apt/preferences.d/alfred
Package: alfred
Pin:  release n=jessie-backports
Pin-Priority:  500
EOF

if [ x"$NEEDS_APTKEY" == x1 ]; then
  apt-key adv --keyserver keyserver.ubuntu.com --recv 16EF3F64CB201D9C
  apt-key adv --keyserver keyserver.ubuntu.com --recv B976BD29286CC7A4
  if [ "x$OPT_FWLIHAS" == "x1" ]; then
    wget -O - http://ftp.lihas.de/debian/apt-key-lihas.gpg | apt-key add -
  fi
fi
if [ x"$NEEDS_APTUPDATE" == x1 ]; then
  apt-get update
fi

# batman-adv-dkms haengt von linux-headers-generic ab, das gibt es auf Debian nicht
if ! dpkg -l equivs >/dev/null 2>&1; then
  apt-get install equivs
fi
if ! dpkg -l linux-headers-generic | grep -qw $(uname -r); then
  TMPDIR=$(mktemp -d)
  equivs-control $TMPDIR/linux-headers-generic
  sed -i '
    s/^Package:.*/Package: linux-headers-generic/
    s/^# Version:.*/Version: '"$(uname -r)"'/
    /^Description/,$d
  ' $TMPDIR/linux-headers-generic
  cat <<EOF >>$TMPDIR/linux-headers-generic
Description: linux-headers-generic translation package
 linux-headers-generic translation package for batman-adv-dkms
EOF
  equivs-build $TMPDIR/linux-headers-generic
  dpkg -i linux-headers-generic_$(uname -r)_all.deb
  rm -rf "$TMPDIR"
fi

# batadv-vis ist nicht in backports
apt-get -y install resolvconf bind9 build-essential bridge-utils batman-adv-dkms git batctl fastd alfred alfred-json openvpn tinc vnstat vnstati python-pip dnsmasq bind9 radvd conntrack $([ "x$OPT_FWLIHAS" == "x1" ] && echo firewall-lihas) isc-dhcp-relay apt-transport-https

cat <<EOF
***********************************************************************
FIXME: sauberes init-Skript in alfred-Paket bauen
#***********************************************************************
EOF

if [ ! -e /etc/systemd/system/alfred@.service ]; then
  cat <<'EOF' >/etc/systemd/system/alfred@.service
[Unit]
Description=A.L.F.R.E.D
After=network.target
ConditionPathExists=/usr/sbin/alfred

[Service]
EnvironmentFile=/etc/default/alfred
ExecStart=/usr/sbin/alfred -u /var/run/alfred-%I.sock -i %I -b %I --master
ExecReload=/bin/kill -HUP $MAINPID
KillMode=process
Restart=on-failure

[Install]
WantedBy=multi-user.target
Alias=alfred.service
EOF
systemctl daemon-reload
fi
cat <<EOF >/etc/sysctl.d/999-freifunk.conf
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
EOF
sysctl -p /etc/sysctl.d/999-freifunk.conf

ensureline "42	icvpn" /etc/iproute2/rt_tables
ensureline "70	stuttgart" /etc/iproute2/rt_tables
ensureline "71	nodefault" /etc/iproute2/rt_tables
ensureline "1000	othergw" /etc/iproute2/rt_tables
ensureline "2000	direct" /etc/iproute2/rt_tables

if ! getent passwd fastd 2>/dev/null 1>&2; then
  adduser --system --no-create-home fastd
fi
if [ ! -e /etc/systemd/system/fastd@.service ]; then
  cat <<'EOF' >/etc/systemd/system/fastd@.service
[Unit]
Description=Fast and Secure Tunnelling Daemon (connection %I)
After=network.target

[Service]
Type=notify
ExecStartPre=/bin/mkdir -p /var/run/fastd
ExecStartPre=/bin/chown fastd /var/run/fastd
ExecStartPre=/bin/rm -f /var/run/fastd/fastd-%I.sock
ExecStart=/usr/bin/fastd --syslog-level debug2 --syslog-ident fastd@%I -c /etc/fastd/%I/fastd.conf --pid-file /var/run/fastd/fastd-%I.pid --status-socket /var/run/fastd/fastd-%I.sock --user fastd
ExecStop=/sbin/kill $(ps ax | awk '$5 ~ /\/usr\/bin\/fastd/ && $0 ~ /vpn00/ {print $1}')
ExecReload=/bin/kill -HUP $MAINPID
ExecStop=/bin/kill $MAINPID

[Install]
WantedBy=multi-user.target
EOF
fi
# Legacy Segment
ensureline "source-directory interfaces.d" /etc/network/interfaces
cat <<EOF >/etc/network/interfaces.d/ffs-seg00
auto br00
iface br00 inet static
        bridge_ports none
        bridge_fd 0
        bridge_maxwait 0
	bridge_hw	02:00:0a:38:00:$GWLID
        address $LEGIP
        netmask 255.255.192.0
	broadcast 172.21.63.255
        # be sure all incoming traffic is handled by the appropriate rt_table
        post-up         /sbin/ip rule add iif \$IFACE table stuttgart priority 10000 || true
        pre-down        /sbin/ip rule del iif \$IFACE table stuttgart priority 10000 || true
        post-up         /sbin/ip rule add iif \$IFACE table nodefault priority 10001 || true
        pre-down        /sbin/ip rule del iif \$IFACE table nodefault priority 10001 || true
        # default route is unreachable
        post-up         /sbin/ip route add 172.21.0.0/18 dev \$IFACE table stuttgart || true
        post-up         /sbin/ip route add unreachable default table nodefault || true
        post-down       /sbin/ip route del unreachable default table nodefault || true
        post-down       /sbin/ip route del 172.21.0.0/18 dev \$IFACE table stuttgart || true
 
iface br00 inet6 static
        address fd21:b4dc:4b1e::a38:$GWLID
        netmask 64
        # ULA route mz for rt_table stuttgart
        post-up         /sbin/ip -6 route add fd21:b4dc:4b1e::/64 proto static dev \$IFACE table stuttgart || true
        post-down       /sbin/ip -6 route del fd21:b4dc:4b1e::/64 proto static dev \$IFACE table stuttgart || true

allow-hotplug vpn00
iface vpn00 inet6 manual
        pre-up          ip link set \$IFACE address 02:00:0a:38:00:$GWLID up || true
        post-up         /usr/sbin/batctl -m bat00 if add \$IFACE || true
        post-up         /sbin/ip link set dev bat00 up || true

allow-hotplug bat00
iface bat00 inet6 manual
        pre-up          /sbin/modprobe batman-adv
        post-up         ip link set \$IFACE up || true
        post-up         /sbin/brctl addif br00 \$IFACE || true
        post-up         /usr/sbin/batctl -m \$IFACE it 10000 || true
        post-up         /usr/sbin/batctl -m \$IFACE vm server || true
        post-up         /usr/sbin/batctl -m \$IFACE gw server  50mbit/50mbit || true
        pre-down        /sbin/brctl delif br00 \$IFACE || true
EOF

if [ ! -d /etc/fastd/ffs-vpn/peers/.git ]; then
  mkdir -p /etc/fastd/ffs-vpn
  git clone https://github.com/freifunk-stuttgart/peers-ffs /etc/fastd/ffs-vpn/peers
fi
for i in $(seq 0 4); do
  VPNID=$(printf "%02i" $i)
  if [ $i -eq 0 ]; then
    VPNPORT=10037
  else
    VPNPORT=1004$i
  fi
  dir=/etc/fastd/vpn$VPNID
  mkdir -p $dir
  cat <<EOF >$dir/fastd.conf
log to syslog level warn;
interface "vpn$VPNID";
method "salsa2012+gmac";    # new method, between gateways for the moment (faster)
method "salsa2012+umac";  
$(for a in $EXT_IP_V4; do echo bind $a:$VPNPORT\;; done)
$(for a in $EXT_IPS_V6; do echo bind [$a]:$VPNPORT\;; done)

include "/etc/fastd/ffs-vpn/secret.conf";
mtu 1406; # 1492 - IPv4/IPv6 Header - fastd Header...
on verify "/root/freifunk/unclaimed.py";
status socket "/var/run/fastd-vpn$VPNID.sock";
include peers from "/etc/fastd/ffs-vpn/peers/vpn$VPNID/peers";
EOF
done
if [ "$VPNKEY" == "Wird generiert" ] && [ ! -e /etc/fastd/ffs-vpn/secret.conf ]; then
  VPNKEY=$(fastd --generate-key --machine-readable)
  cat <<EOF >/etc/fastd/ffs-vpn/secret.conf
secret "$VPNKEY";
EOF
elif [ "$VPNKEY" != "Wird generiert" ]; then
  cat <<EOF >/etc/fastd/ffs-vpn/secret.conf
secret "$VPNKEY";
EOF
else
  VPNKEY=$(sed -n '/secret/{ s/.* "//; s/".*//; p}' /etc/fastd/ffs-vpn/secret.conf)
fi
OLDDIR=$(pwd)
mkdir -p /root/git
cd /root/git


if [ ! -d /root/git/FfsConfigGenerator ]; then
  pip2 install --upgrade netaddr
  git clone https://github.com/freifunk-stuttgart/FfsConfigGenerator.git
  cd FfsConfigGenerator
else
  cd /root/git/FfsConfigGenerator
  git pull
fi
python -c '
import json, sys
GWID='$GWID'
fp = open("config.json","rb")
config = json.load(fp)
fp.close()
if ( "$GWID" not in config["gws"] ):
  fp = open("config.json","wb")
  config["gws"][GWID] = {}
  config["gws"][GWID]["legacyipv4"] = "'$LEGIP'"
  config["gws"][GWID]["legacyipv6"] = "fd21:b4dc:4b1e::a38:'$GWLID'"
  config["gws"][GWID]["externalipv4"] = "'$EXT_IP_V4'"
  config["gws"][GWID]["externalipv6"] = "'$EXT_IPS_V6'"
  config["gws"][GWID]["ipv4start"] = "172.21.'$((4*$GWID))'.2"
  config["gws"][GWID]["ipv4end"] = "172.21.'$((4*$((GWID+1))-1))'.254"
  json.dump(config, fp, indent=2)
  fp.close()
'
./gen_config.py --gwnum $GWID
rsync -rlHpogDtvx --exclude etc/fastd etc /

if [ "x$OPT_FWLIHAS" == "x1" ]; then
  # Uplink VPN Interface
  mkdir -p /etc/firewall.lihas.d/interface-tun9
  # Externes Interface
  mkdir -p /etc/firewall.lihas.d/interface-$EXT_IF_V4
  ensureline 0.0.0.0/0 /etc/firewall.lihas.d/interface-$EXT_IF_V4/network
  ensureline 0.0.0.0/0 /etc/firewall.lihas.d/interface-lo/network
  for port in 10037 $(seq 10040 10044); do
    ensureline "0.0.0.0/0 0.0.0.0/0 udp $port" /etc/firewall.lihas.d/interface-$EXT_IF_V4/privclients
    ensureline "0.0.0.0/0 0.0.0.0/0 udp $port" /etc/firewall.lihas.d/interface-lo/privclients
  done
  ensureline "0.0.0.0/0 0.0.0.0/0 udp 67" /etc/firewall.lihas.d/interface-lo/privclients
  # Referenz Interface Freifunk
  mkdir -p /etc/firewall.lihas.d/interface-br00
  for i in $(seq 1 4); do
    if [ ! -e /etc/firewall.lihas.d/interface-br0$i ]; then
      ln -s /etc/firewall.lihas.d/interface-br00 /etc/firewall.lihas.d/interface-br0$i
    fi
  done
  ensureline 172.21.0.0/16 /etc/firewall.lihas.d/interface-br00/network
  ensureline 10.190.0.0/15 /etc/firewall.lihas.d/interface-br00/network
  ensureline dhcpd /etc/firewall.lihas.d/interface-br00/mark
  ensureline "0.0.0.0/0 hostgroup-gw$GWLID tcp 0" /etc/firewall.lihas.d/interface-br00/privclients
  ensureline "0.0.0.0/0 hostgroup-gw$GWLID udp 0" /etc/firewall.lihas.d/interface-br00/privclients
  ensureline "0.0.0.0/0 hostgroup-gw$GWLID icmp 0" /etc/firewall.lihas.d/interface-br00/privclients
  ensureline "hostgroup-gw$GWLID 255.255.255.255 udp 68" /etc/firewall.lihas.d/interface-br00/privclients
  for iface in tun9 br00 br01 br03 br04 ffsbb; do
    ensureline "0.0.0.0/0 0.0.0.0/0 tcp 0 $iface" /etc/firewall.lihas.d/interface-br00/privclients
    ensureline "0.0.0.0/0 0.0.0.0/0 udp 0 $iface" /etc/firewall.lihas.d/interface-br00/privclients
    ensureline "0.0.0.0/0 0.0.0.0/0 icmp 0 $iface" /etc/firewall.lihas.d/interface-br00/privclients
  done
  for iface in tun9 $EXT_IF_V4; do
    ensureline "0.0.0.0/0 0.0.0.0/0 tcp 0" /etc/firewall.lihas.d/interface-$iface/masquerade
    ensureline "0.0.0.0/0 0.0.0.0/0 udp 0" /etc/firewall.lihas.d/interface-$iface/masquerade
    ensureline "0.0.0.0/0 0.0.0.0/0 icmp 0" /etc/firewall.lihas.d/interface-$iface/masquerade
  done
  for i in $(seq 0 4); do
    for j in $(seq 0 4); do
      ensureline "IPT_FILTER '-A FORWARD -j ACCEPT -i br0$i -o br0$j'" /etc/firewall.lihas.d/localhost
    done
  done
  if [ "x$DIRECTTCP" != "x" ]; then
    for port in $DIRECTTCP; do
      ensureline "0.0.0.0/0 0.0.0.0/0 tcp $port" /etc/firewall.lihas.d/interface-br00/privclients
    done
  fi
  ensureline "0.0.0.0/0 0.0.0.0/0 icmp 3" /etc/firewall.lihas.d/interface-br00/privclients
  ensureline "0.0.0.0/0 0.0.0.0/0 icmp 4" /etc/firewall.lihas.d/interface-br00/privclients
  # Loopback, was lokale ausgehend ist
  mkdir -p /etc/firewall.lihas.d/interface-lo
  if [ "x$OTHERGW_IP" != "x" ]; then
    mkdir -p /etc/firewall.lihas.d/policy-routing-othergw
      echo othergw > /etc/firewall.lihas.d/policy-routing-othergw/comment
      echo 0x1000 > /etc/firewall.lihas.d/policy-routing-othergw/key
      echo NET br00 $OTHERGW_IP > /etc/firewall.lihas.d/policy-routing-othergw/gateway
      ensureline "0.0.0.0/0 0.0.0.0/0 tcp 0 othergw" /etc/firewall.lihas.d/policy-routing
      ensureline "0.0.0.0/0 0.0.0.0/0 udp 0 othergw" /etc/firewall.lihas.d/policy-routing
      ensureline "0.0.0.0/0 0.0.0.0/0 icmp 0 othergw" /etc/firewall.lihas.d/policy-routing
  fi
  if [ "x$DIRECTTCP" != "x" ]; then
    mkdir -p /etc/firewall.lihas.d/policy-routing-direct
      echo direct > /etc/firewall.lihas.d/policy-routing-direct/comment
      echo 0x2000 > /etc/firewall.lihas.d/policy-routing-direct/key
      echo NET $EXT_IF_V4 $EXT_GW_V4 > /etc/firewall.lihas.d/policy-routing-direct/gateway
    for port in $DIRECTTCP; do
      ensureline "0.0.0.0/0 0.0.0.0/0 tcp $port direct" /etc/firewall.lihas.d/policy-routing
    done
    for ip in $EXT_IP_V4; do
      ensureline "$ip 0.0.0.0/0 tcp 0 direct" /etc/firewall.lihas.d/policy-routing
      ensureline "$ip 0.0.0.0/0 udp 0 direct" /etc/firewall.lihas.d/policy-routing
      ensureline "$ip 0.0.0.0/0 icmp 0 direct" /etc/firewall.lihas.d/policy-routing
    done
  fi
  if [ ! -e /etc/firewall.lihas.d/interface-br00/policy-routing ]; then
    ln -s /etc/firewall.lihas.d/policy-routing /etc/firewall.lihas.d/interface-br00/policy-routing
  fi
  mkdir -p /etc/firewall.lihas.d/groups
    # Eigene IP Adressen
    echo $EXT_IP_V4 > /etc/firewall.lihas.d/groups/hostgroup-gw$GWLID
    echo $LEGIP >> /etc/firewall.lihas.d/groups/hostgroup-gw$GWLID
    b=190
    for seg in $(seq 0 $SEGMENTS); do
      c=$(($seg*64))
      if [ $c -gt 255 ]; then
        b=191
        c=$((c-256))
      fi
      echo 10.$b.$c.$GWID
    done >> /etc/firewall.lihas.d/groups/hostgroup-gw$GWLID
fi

# batman Namen
for gw in $(seq 1 $GWS); do
  ensureline "$(printf \"02:00:0a:38:00:%02i gw%02i\" $gw $gw)" /etc/bat-hosts
  for seg in $(seq 1 $SEGMENTS); do
    ensureline "$(printf \"02:00:0a:38:$%02i:%02i gw%02i-%i\" $seg $gw $gw $seg)" /etc/bat-hosts
  done
done

cd "$OLDPWD"
systemctl daemon-reload
systemctl enable fastd@vpn00.service 
systemctl enable alfred@bat00.service 
for seg in $(seq 1 $SEGMENTS); do
  systemctl enable fastd@vpn$(printf "%02i" $seg).service 
  systemctl enable alfred@vpn$(printf "%02i" $seg).service 
done

# fastd keys
cat <<'EOF' >/usr/local/bin/fastd-update
#!/bin/bash

LC_ALL=C
cd /etc/fastd/ffs-vpn/peers
# Peers aktualisieren
git pull | sed -n '/Already up-to-date./d; /^$/d
/^ vpn[0-9]\{2\}/{s/ |.*//p}' | sort -u | while read a; do
  [ ! -e $a ] && echo $a
done  | sed 's#/.*##' | sort -u | while read vpninstance; do
  systemctl restart fastd@$vpninstance
done
# fastd Config reload
killall -HUP fastd
EOF
chmod +x /usr/local/bin/fastd-update

# DHCP Relay
ensureline 'SERVERS="$DHCPRELAYSERVERS"' /etc/default/isc-dhcp-relay
systemctl restart isc-dhcp-relay

# Monitoring
apt-get install check-mk-agent jq

if [ x"$OPT_FWLIHAS" == x1 ]; then
  echo systemctl start firewall-lihas
fi
for i in $(seq 0 4); do
  echo -n systemctl start fastd@vpn0$i.service"; "
done
echo
for i in $(seq 0 4); do
  echo -n systemctl start alfred@bat$i.service"; "
done
echo
echo systemctl start bird

echo "fastd Public Key: $(fastd -c /etc/fastd/ffs-vpn/secret.conf --show-key --machine-readable)"
# vim: ts=2 sw=2 sts=2 sr noet
